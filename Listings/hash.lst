


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ALLDATA, DATA, READWRITE
    2 00000000         
    3 00000000 0000000A 
                       TABLE_SIZE
                               DCD              10
    4 00000004 54 49 54 
              4E       whatToSearchSuccess
                               DCB              "TITN"
    5 00000008 54 49 54 
              49       whatToSearchFail
                               DCB              "TITI"
    6 0000000C         ; [[[[Word index]]]]
    7 0000000C         ; original string key = key to search for each data ex. 
                       "TOON"
    8 0000000C         ; int data = data of each key ex. 0x45 is int data of or
                       iginal string key "TOON"
    9 0000000C         ; hashed key = integer key from calculating original str
                       ing key by hashFn, range [0,TABLE_SIZE)
   10 0000000C 54 4F 4F 
              4E       dataArr DCB              "TOON"      ; hashed key = 0 
   11 00000010 00000045        DCD              0x45
   12 00000014 44 52 4F 
              70               DCB              "DROp"      ; hashed key = 1 
   13 00000018 0000EEEE        DCD              0xEEEE
   14 0000001C 4B 4F 4E 
              47               DCB              "KONG"      ; hashed key = 3 
   15 00000020 00000015        DCD              0x15
   16 00000024 4E 45 45 
              4E               DCB              "NEEN"      ; hashed key = 4 
   17 00000028 00000040        DCD              0x40
   18 0000002C 6B 69 6E 
              67               DCB              "king"      ; hashed key = 5
   19 00000030 00000FFF        DCD              0xFFF
   20 00000034 32 21 3D 
              34               DCB              "2!=4"      ; hashed key = 6
   21 00000038 12345678        DCD              0x12345678
   22 0000003C 4C 55 49 
              53               DCB              "LUIS"      ; hashed key = 7
   23 00000040 00000428        DCD              0x428
   24 00000044 62 6F 41 
              54               DCB              "boAT"      ; hashed key = 8
   25 00000048 00000777        DCD              0x777
   26 0000004C 2A 55 43 
              4B               DCB              "*UCK"      ; hashed key = 9
   27 00000050 00658874        DCD              0x658874
   28 00000054 54 49 54 
              4E               DCB              "TITN"      ; hashed key = 9->0
                                                            ->1->2
   29 00000058 00000AAA        DCD              0xAAA
   30 0000005C 54 49 54 
              4E               DCB              "TITN"      ; update data for h
                                                            ashed key = 9->0->1
                                                            ->2
   31 00000060 00000BBB        DCD              0xBBB
   32 00000064 47 41 4D 
              45               DCB              "GAME"      ; hashed key = 2 (b
                                                            ut already full, ig
                                                            nore)
   33 00000068 00000BDC        DCD              0xBDC



ARM Macro Assembler    Page 2 


   34 0000006C 00              DCB              0           ;0 = EOF
   35 0000006D         
   36 0000006D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    hashTableData
                               SPACE            44          ; 4*TABLE_SIZE = 40
                                                             + Offset(4)
   37 00000099 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    hashTableKey
                               SPACE            44          ; 4*TABLE_SIZE = 40
                                                             + Offset(4)
   38 000000C5         
   39 000000C5         ;=======================================================
                       ==
   40 000000C5                 AREA             HASHING, CODE, READONLY
   41 00000000         
   42 00000000                 ENTRY
   43 00000000                 EXPORT           main
   44 00000000         
   45 00000000         main
   46 00000000         ;--------------------------------------------------
   47 00000000         ; HASH ALL DATA  
   48 00000000 F000 F80D       BL               hashALL
   49 00000004         ;-----------------------------------------------------
   50 00000004         ; Search for 'TITN' data (0xBBB), result saved in r0
   51 00000004 F8DF C0F8       LDR              r12,=whatToSearchSuccess ; PASS
                                                             string to search a
                                                            ddr as parameter vi
                                                            a r12 (pass by ref.
                                                            ) 
   52 00000008 F04F 0500       MOV              r5,#0       ; reset attempt
   53 0000000C F000 F865       BL               search
   54 00000010         ; result  r1 = 0xBBB,
   55 00000010         ;   r0 = address of r1 data,



ARM Macro Assembler    Page 3 


   56 00000010         ;   r2 = 1 success flag
   57 00000010         ;--------------------------------------------------
   58 00000010         ; Search for 'TITI' data , fail
   59 00000010 F8DF C0F0       LDR              r12,=whatToSearchFail ; PASS st
                                                            ring to search addr
                                                             as parameter via r
                                                            12 (pass by ref.) 
   60 00000014 F04F 0500       MOV              r5,#0       ; reset attempt
   61 00000018 F000 F85F       BL               search
   62 0000001C         ; result  r0 = -1,
   63 0000001C         ;   r2 = 0 not success flag
   64 0000001C         ;--------------------------------------------------
   65 0000001C E070            B                END_OF_PROGRAM
   66 0000001E         ;===========================================
   67 0000001E         hashALL
   68 0000001E         ;r0 = hashed key (-1: error)
   69 0000001E         ;r2 = first key char of each data (for EOF checking) 
   70 0000001E         ;r10 = hashTableKey address
   71 0000001E         ;r11 = hashTableData address
   72 0000001E         ;r12 = address of dataArr
   73 0000001E F8DF C0E8       LDR              r12,=dataArr
   74 00000022 F8DF B0E8       LDR              r11,=hashTableData
   75 00000026 F8DF A0E8       LDR              r10,=hashTableKey
   76 0000002A F8CD E000       STR              lr, [sp, #0] ; Save return addr
                                                            ess
   77 0000002E         
   78 0000002E         loopHash
   79 0000002E F89C 2000       LDRB             r2,[r12]    ; LOAD first char (
                                                            Byte) ; 0 = EOF
   80 00000032 2A00            CMP              r2,#0       ; if EOF, then do a
                                                            ll ...EQ operations
                                                            
   81 00000034 BF04 F8DD 
              E000             LDREQ            lr, [sp, #0] ; Load return addr
                                                            ess
   82 0000003A 46F7            MOVEQ            pc,lr       ; then return
   83 0000003C         
   84 0000003C F04F 0500       MOV              r5,#0       ; reset attempt
   85 00000040 F000 F808       BL               hashFn      ; if not, then hash
                                                             next data
   86 00000044 F000 F81D       BL               keyCheck    ; then check key if
                                                             collide or no spac
                                                            e left
   87 00000048 F1B0 3FFF       CMP              r0,#-1      ; if error, skip 
   88 0000004C BF18 F000 
              F83B             BLNE             saveData    ; if not, save to t
                                                            able
   89 00000052         
   90 00000052 E7EC            B                loopHash
   91 00000054         ;=======================================================
                       =======  
   92 00000054         hashFn
   93 00000054         ;r0 = hashed key
   94 00000054         ;r1 = int data
   95 00000054         ;r2 = i runner
   96 00000054         ;r3 = TABLE_SIZE
   97 00000054         ;r4 = imm #4 (for MUL)
   98 00000054         ;r5 = attempt counter 
   99 00000054         ;r6 = temp register



ARM Macro Assembler    Page 4 


  100 00000054         ;r9 = address of dataArr (first address)
  101 00000054         ;r10 = hashTableKey address
  102 00000054         ;r11 = hashTableData address
  103 00000054         ;r12 = address of dataArr (now pointing string key) (inc
                       remental r9)
  104 00000054 F04F 0000       MOV              r0,#0       ; prepare r0 for ke
                                                            y calculation
  105 00000058 F04F 0200       MOV              r2,#0       ; prepare runner
  106 0000005C 46E1            MOV              r9,r12      ; Save address of f
                                                            irst character in s
                                                            tring
  107 0000005E         loopFn
  108 0000005E F81C 1B01       LDRB             r1,[r12],#1 ; LOAD each char of
                                                             name (Byte) & Shif
                                                            t 1 Byte
  109 00000062 4408            ADD              r0,r0,r1    ; r0 += r1 ascii va
                                                            lue
  110 00000064 F102 0201       ADD              r2,r2,#1    ; i++
  111 00000068 2A04            CMP              r2,#4       ; check if r2 == 4 
                                                            ?
  112 0000006A D1F8            BNE              loopFn      ; if not, go to nex
                                                            t char
  113 0000006C         
  114 0000006C         ; r0 MOD TABLE_SIZE
  115 0000006C 4B29            LDR              r3,=TABLE_SIZE
  116 0000006E 681B            LDR              r3,[r3]
  117 00000070 FBB0 F6F3       UDIV             r6, r0, r3  ; r6 <- r0 / TABLE_
                                                            SIZE 
  118 00000074 FB03 0016       MLS              r0, r3, r6, r0 ; r0 <- r0 - (r3
                                                             * r6)
  119 00000078         
  120 00000078         ; Now r0 = hashed key [0,TABLE_SIZE) 
  121 00000078 F04F 0404       MOV              r4,#4
  122 0000007C FB00 F004       MUL              r0,r0,r4    ; x4 (Byte to Word)
                                                            
  123 00000080 46F7            MOV              pc,lr
  124 00000082         ;=======================================================
                       =======   
  125 00000082         keyCheck
  126 00000082         ;r0 = hashed key
  127 00000082         ;r1 = existing original string key in hashTableKey[r0]
  128 00000082         ;r2 = new original key to check
  129 00000082         ;r3 = TABLE_SIZE
  130 00000082         ;r4 = imm #4 (for MUL)
  131 00000082         ;r5 = attempt counter 
  132 00000082         ;r6-7 = temp register
  133 00000082         ;r9 = address of dataArr (first address)
  134 00000082         ;r10 = hashTableKey address
  135 00000082         ;r11 = hashTableData address
  136 00000082         ;r12 = address of dataArr (now pointing string key) (inc
                       remental r9)
  137 00000082         
  138 00000082         ; Check if same key already exist (UPDATE CHECK)
  139 00000082 F85A 1000       LDR              r1,[r10,r0] ; LOAD whole exist 
                                                            original string key
                                                             from hashTableKey[
                                                            r0]
  140 00000086 F8D9 2000       LDR              r2,[r9]     ; LOAD whole new or
                                                            iginal string key v



ARM Macro Assembler    Page 5 


                                                            alue (Word)
  141 0000008A 4291            CMP              r1,r2       ; if exist==new, th
                                                            en OK, return
  142 0000008C BF08 46F7       MOVEQ            pc,lr
  143 00000090         
  144 00000090         ; Check if exist string is empty (COLLISION CHECK)
  145 00000090 2900            CMP              r1,#0
  146 00000092 BF08 46F7       MOVEQ            pc,lr       ; if == 0, no colli
                                                            sion, then OK, retu
                                                            rn
  147 00000096         ; else, Collision,Linear probling (+1)
  148 00000096 F100 0004       ADD              r0,r0,#4    ; (+4 ,Byte to Word
                                                            )
  149 0000009A F105 0501       ADD              r5,r5,#1    ; attempt++
  150 0000009E         
  151 0000009E         ; Space available check
  152 0000009E 4F1D            LDR              r7,=TABLE_SIZE
  153 000000A0 683E            LDR              r6,[r7]
  154 000000A2 42B5            CMP              r5,r6       ; if (used == TABLE
                                                            _SIZE)
  155 000000A4 BF02 F04F 
              30FF             MOVEQ            r0,#-1      ; set key = -1 (as 
                                                            error flag)
  156 000000AA F10C 0C04       ADDEQ            r12,#4      ; skip that int
  157 000000AE 46F7            MOVEQ            pc,lr       ; no space left, re
                                                            turn with no change
                                                             & error
  158 000000B0         
  159 000000B0         ; Out of bound check (if r0 >= TABLE_SIZE , then back to
                        0)
  160 000000B0 F04F 0404       MOV              r4,#4
  161 000000B4 FBB0 F0F4       UDIV             r0,r0,r4    ; (r0/4 , Word to B
                                                            yte)
  162 000000B8 4B16            LDR              r3,=TABLE_SIZE
  163 000000BA 681B            LDR              r3,[r3]
  164 000000BC 4298            CMP              r0,r3
  165 000000BE BFA8 2000       MOVGE            r0,#0       ; back to 0
  166 000000C2 FB00 F004       MUL              r0,r0,r4    ; (r0*4 , Byte to W
                                                            ord)
  167 000000C6 E7DC            B                keyCheck
  168 000000C8         
  169 000000C8         ;=======================================================
                       =======
  170 000000C8         saveData
  171 000000C8         ;r0 = hashed key
  172 000000C8         ;r1 = int data
  173 000000C8         ;r2 = original string key
  174 000000C8         ;r9 = original string key address
  175 000000C8         ;r10 = hashTableKey address
  176 000000C8         ;r11 = hashTableData address
  177 000000C8         ;r12 = address of dataArr (now pointing int data)
  178 000000C8         
  179 000000C8         ; Save key to hashTablekey[r0]
  180 000000C8 F8D9 2000       LDR              r2,[r9]
  181 000000CC F84A 2000       STR              r2,[r10,r0] ; STORE string valu
                                                            e -> hashTableKey[r
                                                            0]
  182 000000D0         
  183 000000D0         ; Save data to hashTableData[r0] 



ARM Macro Assembler    Page 6 


  184 000000D0 F85C 1B04       LDR              r1,[r12],#4 ; LOAD int data (Wo
                                                            rd) & Shift 4 Byte
  185 000000D4 F84B 1000       STR              r1,[r11,r0] ; STORE int value -
                                                            > hashTableData[r0]
                                                            
  186 000000D8         
  187 000000D8 46F7            MOV              pc,lr       ; return
  188 000000DA         
  189 000000DA         ;=======================================================
                       =======
  190 000000DA         search
  191 000000DA         ;r0 = return result (address)
  192 000000DA         ;r1 = return result (int data)
  193 000000DA         ;r2 = result flag (0:fail to search,1:success)
  194 000000DA         ;r11 = hashTableData address
  195 000000DA F8CD E000       STR              lr, [sp, #0] ; Save return addr
                                                            ess
  196 000000DE F7FF FFB9       BL               hashFn
  197 000000E2 F8DF B028       LDR              r11,=hashTableData
  198 000000E6 F7FF FFCC       BL               keyCheck    ; check key if matc
                                                            h
  199 000000EA F1B0 3FFF       CMP              r0,#-1
  200 000000EE BF0F 2200       MOVEQ            r2,#0       ; if key not found,
                                                             set r2 = 0 as not 
                                                            success flag
  201 000000F2 2201            MOVNE            r2,#1       ; else , r2 = 1 as 
                                                            success flag
  202 000000F4 F85B 1000       LDRNE            r1,[r11,r0] ; if found, LOAD re
                                                            sult from  hashTabl
                                                            eData[r0]
  203 000000F8 4458            ADDNE            r0,r11      ; r0 + hashTableDat
                                                            a address
  204 000000FA F8DD E000       LDR              lr, [sp, #0] ; LOAD return addr
                                                            ess
  205 000000FE 46F7            MOV              pc,lr       ; return
  206 00000100         
  207 00000100         END_OF_PROGRAM
  208 00000100                 END                          ;End of the program
                                                            
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\hash.d -o.\objects\hash.o -ID:\Compressed\TEST\RTE -IE:\
Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IE:\Keil_v5\ARM\PACK\ARM\CMSIS\
4.5.0\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --predefine="__UVIS
ION_VERSION SETA 517" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --
list=.\listings\hash.lst Hash.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ALLDATA 00000000

Symbol: ALLDATA
   Definitions
      At line 1 in file Hash.s
   Uses
      None
Comment: ALLDATA unused
TABLE_SIZE 00000000

Symbol: TABLE_SIZE
   Definitions
      At line 3 in file Hash.s
   Uses
      At line 115 in file Hash.s
      At line 152 in file Hash.s
      At line 162 in file Hash.s

dataArr 0000000C

Symbol: dataArr
   Definitions
      At line 10 in file Hash.s
   Uses
      At line 73 in file Hash.s
Comment: dataArr used once
hashTableData 0000006D

Symbol: hashTableData
   Definitions
      At line 36 in file Hash.s
   Uses
      At line 74 in file Hash.s
      At line 197 in file Hash.s

hashTableKey 00000099

Symbol: hashTableKey
   Definitions
      At line 37 in file Hash.s
   Uses
      At line 75 in file Hash.s
Comment: hashTableKey used once
whatToSearchFail 00000008

Symbol: whatToSearchFail
   Definitions
      At line 5 in file Hash.s
   Uses
      At line 59 in file Hash.s
Comment: whatToSearchFail used once
whatToSearchSuccess 00000004

Symbol: whatToSearchSuccess
   Definitions
      At line 4 in file Hash.s
   Uses
      At line 51 in file Hash.s
Comment: whatToSearchSuccess used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

END_OF_PROGRAM 00000100

Symbol: END_OF_PROGRAM
   Definitions
      At line 207 in file Hash.s
   Uses
      At line 65 in file Hash.s
Comment: END_OF_PROGRAM used once
HASHING 00000000

Symbol: HASHING
   Definitions
      At line 40 in file Hash.s
   Uses
      None
Comment: HASHING unused
hashALL 0000001E

Symbol: hashALL
   Definitions
      At line 67 in file Hash.s
   Uses
      At line 48 in file Hash.s
Comment: hashALL used once
hashFn 00000054

Symbol: hashFn
   Definitions
      At line 92 in file Hash.s
   Uses
      At line 85 in file Hash.s
      At line 196 in file Hash.s

keyCheck 00000082

Symbol: keyCheck
   Definitions
      At line 125 in file Hash.s
   Uses
      At line 86 in file Hash.s
      At line 167 in file Hash.s
      At line 198 in file Hash.s

loopFn 0000005E

Symbol: loopFn
   Definitions
      At line 107 in file Hash.s
   Uses
      At line 112 in file Hash.s
Comment: loopFn used once
loopHash 0000002E

Symbol: loopHash
   Definitions
      At line 78 in file Hash.s
   Uses
      At line 90 in file Hash.s
Comment: loopHash used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

main 00000000

Symbol: main
   Definitions
      At line 45 in file Hash.s
   Uses
      At line 43 in file Hash.s
Comment: main used once
saveData 000000C8

Symbol: saveData
   Definitions
      At line 170 in file Hash.s
   Uses
      At line 88 in file Hash.s
Comment: saveData used once
search 000000DA

Symbol: search
   Definitions
      At line 190 in file Hash.s
   Uses
      At line 53 in file Hash.s
      At line 61 in file Hash.s

10 symbols
353 symbols in table
